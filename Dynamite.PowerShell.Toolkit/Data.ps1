#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
	.SYNOPSIS
		Commandlet to add sample items to a SharePoint library

	.DESCRIPTION
		Add sample items in a SharePoint library based on a XML configuration file

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   
    .NOTES
         Here is the Structure XML schema.

        <Configuration>
	        <Web Url="http:/mysite/sites/mysubsite">
		        <List WebRelativeUrl="/Lists/MyList">
                    <!-- 
                        ID: ID of the content type for newly created items. Must exists in the list.
                        NumberOfItems: If overwrite parameter is not specified, number of items to generate. Ignored otherwise.
                    -->
			        <ContentType ID="0x01008093F9E3678D3D4392C57B0E6929DE05010101" NumberOfItems="20">
                        <!-- 
                            SampleFolder: Path of the folder that contains data for the current field type
                            
                            For TextFields, there is one file by column internal name

                            Column Internal Name: Title >> File Name: Title.txt

                            In the file, separate each string by a new line

                        -->
				        <TextFields SampleFolder="D:\FR\TextFields">
					        <Field InternalName="Title"/>
					        <Field InternalName="Summary"/>
				        </TextFields>
                        <!-- 
                            SampleFolder: Path of the folder that contains data for the current field type
                            
                            For ImageFields, put here your images
                        -->
				        <ImageFields SampleFolder="D:\FR\ImageFields">
					        <Field InternalName="PublishingPageImage"/>
				        </ImageFields>
                        <!-- 
                            SampleFolder: Path of the folder that contains data for the current field type
                            
                            For TaxonomyFields, there is one file by Term Set name

                            Term Set Name: MyTermSet >> File Name: MyTermSet.txt

                            In the file, separate each term by a new line
                        -->
				        <TaxonomyFields SampleFolder="D:\FR\TaxonomyFields" >
					        <Field InternalName="MyTaxonomyField" AssociatedTermSetGroup="MyGroup" AssociatedTermSet="MyTermSetName"/>
				        </TaxonomyFields>
                                                <!-- 
                            SampleFolder: Path of the folder that contains data for the current field type
                            
                            For HTMLFields, there is one file by content sample

                            Article1.txt
                            Article2.txt
                            etc...

                            In the file, you can copy directly the HTML code for the content
                        -->
				        <HTMLFields SampleFolder="D:\FR\HTMLFields">
					        <Field InternalName="PublishingPageContent"/>
				        </HTMLFields>		
			        </ContentType>
		        </List>
	        </Web>
        </Configuration>


	.PARAMETER  XmlPath
		Physical path of the XML configuration file.
		
	.PARAMETER  Overwrite
		If true, overwrite field values of existing items in the library. Otherwise, create new items.


	.EXAMPLE
		PS C:\> Add-DSPSampleContent "D:\Data.xml" -Overwrite

	.OUTPUTS
		n/a. 
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Add-DSPSampleContent
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath,

        [Parameter(Mandatory=$false, Position=1)]
		[switch]$Overwrite=$false,

        [Parameter(Mandatory=$false, Position=2)]
		[switch]$SyncVariations=$false     
	)
	
	$Config = [xml](Get-Content $XmlPath)
	
    # Process all Term Groups
	$Config.Configuration.Web | ForEach-Object {
	
		$web = Get-SPWeb -Identity $_.Url
		$webServerRelativeUrl = $web.ServerRelativeUrl

        
        $_.List | ForEach-Object {


            $listUrl = $webServerRelativeUrl + $_.WebRelativeUrl
            $list = $web.GetList($listUrl)

            Add-ListContent $list $_ $Overwrite $SyncVariations
        }   

        if($SyncVariations)
        {
            Start-ListItemPropagation $web.Site.WebApplication
        }
	}
}

function Add-ListContent
{
    param
	(
		[Parameter(Mandatory=$true, Position=0)]
		$SPList,

        [Parameter(Mandatory=$true, Position=1)]
		$ListConfig,

        [Parameter(Mandatory=$true, Position=2)]
		$Overwrite,

        [Parameter(Mandatory=$false, Position=3)]
		$SyncVariations  
	)

        $ListConfig.ContentType | ForEach-Object {

        $contentType = $_
        $folders = @{"TextFields" = $_.TextFields.SampleFolder ; "ImageFields" = $_.ImageFields.SampleFolder ; "TaxonomyFields" = $_.TaxonomyFields.SampleFolder ; "HTMLFields" = $_.HTMLFields.SampleFolder }

        # If overwrite, replace all list items content for the content type
        if($Overwrite)
        {
            $spQuery = New-Object Microsoft.SharePoint.SPQuery 
            $camlQuery = "<Where>
                            <BeginsWith>
                                <FieldRef Name='ContentTypeId'/>
                                <Value Type='ContentTypeId'>" + $_.ID + "</Value>
                            </BeginsWith>
                        </Where>
                        <OrderBy>
                            <FieldRef Name='ID' />
                        </OrderBy>" 
            $spQuery.Query = $camlQuery 
            $SPList.GetItems($spQuery) | ForEach-Object {
            
                Process-Fields $_ $folders $contentType

                if($SyncVariations)
                {
                    Sync-DSPItem $_
                }  
            }
        }
        else
        {
            $numberOfItems = $_.NumberOfItems
       
            for ($i=1; $i -le $numberOfItems; $i++)
            {
                $listItem = $SPList.Items.Add()
                $listItem["ContentTypeId"] = $_.ID

                Process-Fields $listItem  $folders $contentType
                
                if($SyncVariations)
                {
                    Sync-DSPItem $listItem
                }           
            }
	   }
    }   
}

function Process-Fields
{
    param
	(
		[Parameter(Mandatory=$true, Position=0)]
		$SPListItem,

        [Parameter(Mandatory=$true, Position=1)]
		$Folders,

        [Parameter(Mandatory=$true, Position=2)]
		$ContentType

	)

    # Text Fields
    if($ContentType.TextFields -ne $null)
    {

        $ContentType.TextFields.Field | ForEach-Object {
                    
            Process-TextField $SPListItem $folders["TextFields"] $_ 
        }
    }

    # Image Fields
    if($ContentType.ImageFields -ne $null)
    {
        $ContentType.ImageFields.Field | ForEach-Object {
                    
            Process-ImageField $SPListItem $folders["ImageFields"] $_    
        }  
    }

    # Taxonomy Fields
    if($ContentType.TaxonomyFields -ne $null)
    {
        $ContentType.TaxonomyFields.Field | ForEach-Object {
                    
            Process-TaxonomyField $SPListItem $folders["TaxonomyFields"] $_  $_.AssociatedTermSet $_.AssociatedTermSetGroup   
        }  
    }

    #HTML Fields
    if($ContentType.HTMLFields -ne $null)
    {
        $ContentType.HTMLFields.Field | ForEach-Object {
                    
            Process-HTMLField $SPListItem $folders["HTMLFields"] $_  
        }  
    }

    # Approve all items
    $SPListItem["_ModerationStatus"] = 0
    $SPListItem.Update()  
}
  
function Process-ImageField
{
    param
	(
        [Parameter(Mandatory=$true, Position=0)]
		[Microsoft.SharePoint.SPListItem]$SPListItem,

		[Parameter(Mandatory=$true, Position=1)]
		$FolderPath,

        [Parameter(Mandatory=$true, Position=2)]
		$Field
	)

    # Default Images Library of the Root Site Collection Web
    $docLibName = "Images"

    $rootWebUrl = $SPList.ParentWeb.Site.RootWeb.Url 

    if(((Get-ChildItem $FolderPath).Count -gt 0))
    {  
    
        # Get a random image in the folder
        $imageFilePath = Get-ChildItem $FolderPath | Get-Random -Count 1
           
        # Upload the image in a SharePoint Library
        $imagePath = Add-DSPFile $RootWebUrl $docLibName $imageFilePath.FullName $true
        $image = New-Object Microsoft.SharePoint.Publishing.Fields.ImageFieldValue
        $image.ImageUrl = $imagePath
     
        [Microsoft.SharePoint.Publishing.Fields.ImageFieldValue]$SPListItem[$Field.InternalName] = $image
    }
}

function Process-TextField
{
    param
	(
        [Parameter(Mandatory=$true, Position=0)]
		[Microsoft.SharePoint.SPListItem]$SPListItem,

		[Parameter(Mandatory=$true, Position=1)]
		$FolderPath,

        [Parameter(Mandatory=$true, Position=2)]
		$Field
	)

    if(((Get-ChildItem $FolderPath).Count -gt 0))
    {  
        $textFieldFile = Get-ChildItem $FolderPath | Where-Object {$_.Name -match $Field.InternalName }
 
        $fieldName = [System.IO.Path]::GetFileNameWithoutExtension($textFieldFile)

        # Get a random string value
        $randomText = Get-Content $textFieldFile.FullName | Get-Random -Count 1

        $SPListItem[$fieldName] = $randomText
    }
}

function Process-TaxonomyField
{
    param
	(
        [Parameter(Mandatory=$true, Position=0)]
		[Microsoft.SharePoint.SPListItem]$SPListItem,

		[Parameter(Mandatory=$true, Position=1)]
		$FolderPath,

        [Parameter(Mandatory=$true, Position=2)]
		$Field,

        [Parameter(Mandatory=$true, Position=3)]
		$TermSetName,

        [Parameter(Mandatory=$true, Position=4)]
		$TermSetGroup
	)

    if(((Get-ChildItem $FolderPath).Count -gt 0))
    {  
        $taxonomyFile = Get-ChildItem $FolderPath | Where-Object {$_.Name -match $Field.AssociatedTermSet +"*" }

        # Get a random taxonomy value
        $termSetValue = [System.IO.Path]::GetFileNameWithoutExtension($taxonomyFile)

        # Get a random label for the term set
        $randomTerm = Get-Content $taxonomyFile.FullName | Get-Random -Count 1

        # Get the associated term set
        $termSet = Get-DSPTermSet -GroupName $TermSetGroup -TermSetName $termSetValue
        $term = $termSet.GetTerms($randomTerm, $false)

        # Format field
        $labelGuidPair = [Microsoft.SharePoint.Taxonomy.TaxonomyItem]::NormalizeName($term[0].Labels[0].Value) + [Microsoft.SharePoint.Taxonomy.TaxonomyField]::TaxonomyGuidLabelDelimiter  + $term[0].Id.ToString()

        Set-DSPTaxonomyFieldValue $SPListItem $Field.InternalName $labelGuidPair
    }
}

function Process-HTMLField
{
    param
	(
        [Parameter(Mandatory=$true, Position=0)]
		[Microsoft.SharePoint.SPListItem]$SPListItem,

		[Parameter(Mandatory=$true, Position=1)]
		$FolderPath,

        [Parameter(Mandatory=$true, Position=2)]
		$Field
	)
   
    if(((Get-ChildItem $FolderPath).Count -gt 0))
    {  
        # Get a random content
        $articleText = Get-ChildItem $FolderPath | Get-Random -Count 1 | Get-Content | out-string

        $SPListItem[$Field.InternalName] = $articleText
    }
}