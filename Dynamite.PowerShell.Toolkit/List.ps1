#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
	.SYNOPSIS
		Commandlet to add a file to a SharePoint library

	.DESCRIPTION
		Add a new file to a SharePoint library

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   
	.PARAMETER  WebUrl
		Url of the SPweb that contains the library.
		
	.PARAMETER  DocLibName
		The library name.

	.PARAMETER  FilePath
		Physical file path to upload.

	.PARAMETER  Force
		If true, overwrite existing file. Otherwise, prompt for a confirmation.
		
		
	.EXAMPLE
		PS C:\> Add-DSPFile "http://mysite/sites/mysubsite" "Images" "C:\Photo.jpeg" $true

	.OUTPUTS
		The server relative url of the new added file.  
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Add-DSPFile          
{            
    [CmdletBinding()]            
    Param(            
    [Parameter(Mandatory=$true,ValueFromPipeline=$true)]            
    [string]$WebUrl,            
    [Parameter(Mandatory=$true)]            
    [string]$DocLibName,            
    [Parameter(Mandatory=$true)]            
    [string]$FilePath,  
    [Parameter(Mandatory=$false)]            
    [string]$Force           
    )                 
                       
    $spWeb = Get-SPWeb -Identity $WebUrl             
    $spWeb.AllowUnsafeUpdates = $true;            
    $List = $spWeb.Lists[$DocLibName]            
    $folder = $List.RootFolder            
    $FileName = $FilePath.Substring($FilePath.LastIndexOf("\")+1)             
    $File= Get-ChildItem $FilePath            
    [Microsoft.SharePoint.SPFile]$spFile = $spWeb.GetFile($folder.Url + "/" + $File.Name)            
    $flagConfirm = 'y'            
    if($spFile.Exists -eq $true -and $Force -ne $true)            
    {            
        $flagConfirm = Read-Host "File $FileName already exists in library $DocLibName, do you  want to upload a new version(y/n)?"             
    }            
                
    if ($flagConfirm -eq 'y' -or $flagConfirm -eq 'Y')            
    {            
        $fileStream = ([System.IO.FileInfo] (Get-Item $File.FullName)).OpenRead()            
        #Add file            
        write-host -NoNewLine -f yellow "Copying file " $File.Name " to " $folder.ServerRelativeUrl "..."            
        [Microsoft.SharePoint.SPFile]$spFile = $folder.Files.Add($folder.Url + "/" + $File.Name, [System.IO.Stream]$fileStream, $true)            
        write-host -f Green "...Success!"            
        #Close file stream            
        $fileStream.Close()            
        write-host -NoNewLine -f yellow "Update file properties " $spFile.Name "..."            
        $spFile.Item["Title"] = "Document Metrics Report"            
        $spFile.Item.Update()            
        write-host -f Green "...Success!"            
    }               
    $spWeb.AllowUnsafeUpdates = $false;            
            
    return  $spFile.Item["ServerUrl"]        
}